version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cid-postgres
    environment:
      POSTGRES_DB: ciddb
      POSTGRES_USER: ciduser
      POSTGRES_PASSWORD: cidpassword
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_export.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./scripts/backup:/scripts:ro
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - cid-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ciduser -d ciddb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin - Web-based PostgreSQL Administration
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: cid-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - cid-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Database Backup Service (Production)
  db-backup-prod:
    image: postgres:15-alpine
    container_name: cid-backup-prod
    environment:
      PGPASSWORD: cidpassword
      POSTGRES_HOST: postgres
      POSTGRES_DB: ciddb
      POSTGRES_USER: ciduser
    volumes:
      - ./backups:/backups
      - ./scripts/backup:/scripts:ro
    networks:
      - cid-network
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: /scripts/backup.sh
    profiles:
      - backup

  # CID Web Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: cid-app
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://ciduser:cidpassword@postgres:5432/ciddb
      SESSION_SECRET: your-super-secret-session-key-change-this-in-production
      FORCE_HTTPS: "false"
      ALLOW_HTTP_SESSIONS: "true"
      ALLOW_INSECURE_COOKIES: "false"
    ports:
      - "5000:5000"
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
      - .:/app
      - /app/node_modules
    networks:
      - cid-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Production HTTPS)
  nginx:
    image: nginx:alpine
    container_name: cid-nginx
    profiles:
      - production
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - cid-network
    depends_on:
      - app
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  pgadmin_data:
    driver: local

networks:
  cid-network:
    driver: bridge